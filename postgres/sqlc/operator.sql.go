// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: operator.sql

package sqlc

import (
	"context"
)

const createOperator = `-- name: CreateOperator :exec
INSERT INTO operator (id, namespace_id, name, public_key, jwt)
VALUES ($1, $2, $3, $4, $5)
`

type CreateOperatorParams struct {
	ID          string `json:"id"`
	NamespaceID string `json:"namespace_id"`
	Name        string `json:"name"`
	PublicKey   string `json:"public_key"`
	Jwt         string `json:"jwt"`
}

func (q *Queries) CreateOperator(ctx context.Context, arg CreateOperatorParams) error {
	_, err := q.db.Exec(ctx, createOperator,
		arg.ID,
		arg.NamespaceID,
		arg.Name,
		arg.PublicKey,
		arg.Jwt,
	)
	return err
}

const deleteOperator = `-- name: DeleteOperator :exec
SELECT delete_operator_and_nkeys($1)
`

func (q *Queries) DeleteOperator(ctx context.Context, operatorID string) error {
	_, err := q.db.Exec(ctx, deleteOperator, operatorID)
	return err
}

const listOperators = `-- name: ListOperators :many
SELECT id, namespace_id, name, public_key, jwt
FROM operator
WHERE namespace_id = $1
  AND ($2::TEXT IS NULL OR id <= $2::TEXT)
ORDER BY id DESC LIMIT $3
`

type ListOperatorsParams struct {
	NamespaceID string  `json:"namespace_id"`
	Cursor      *string `json:"cursor"`
	Size        int32   `json:"size"`
}

func (q *Queries) ListOperators(ctx context.Context, arg ListOperatorsParams) ([]*Operator, error) {
	rows, err := q.db.Query(ctx, listOperators, arg.NamespaceID, arg.Cursor, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Operator
	for rows.Next() {
		var i Operator
		if err := rows.Scan(
			&i.ID,
			&i.NamespaceID,
			&i.Name,
			&i.PublicKey,
			&i.Jwt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readOperator = `-- name: ReadOperator :one
SELECT id, namespace_id, name, public_key, jwt
FROM operator
WHERE id = $1
`

func (q *Queries) ReadOperator(ctx context.Context, id string) (*Operator, error) {
	row := q.db.QueryRow(ctx, readOperator, id)
	var i Operator
	err := row.Scan(
		&i.ID,
		&i.NamespaceID,
		&i.Name,
		&i.PublicKey,
		&i.Jwt,
	)
	return &i, err
}

const readOperatorByName = `-- name: ReadOperatorByName :one
SELECT id, namespace_id, name, public_key, jwt
FROM operator
WHERE name = $1
`

func (q *Queries) ReadOperatorByName(ctx context.Context, name string) (*Operator, error) {
	row := q.db.QueryRow(ctx, readOperatorByName, name)
	var i Operator
	err := row.Scan(
		&i.ID,
		&i.NamespaceID,
		&i.Name,
		&i.PublicKey,
		&i.Jwt,
	)
	return &i, err
}

const readOperatorByPublicKey = `-- name: ReadOperatorByPublicKey :one
SELECT id, namespace_id, name, public_key, jwt
FROM operator
WHERE public_key = $1
`

func (q *Queries) ReadOperatorByPublicKey(ctx context.Context, publicKey string) (*Operator, error) {
	row := q.db.QueryRow(ctx, readOperatorByPublicKey, publicKey)
	var i Operator
	err := row.Scan(
		&i.ID,
		&i.NamespaceID,
		&i.Name,
		&i.PublicKey,
		&i.Jwt,
	)
	return &i, err
}

const updateOperator = `-- name: UpdateOperator :exec
UPDATE operator
SET name = $2,
    jwt  = $3
WHERE id = $1
`

type UpdateOperatorParams struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	Jwt  string `json:"jwt"`
}

func (q *Queries) UpdateOperator(ctx context.Context, arg UpdateOperatorParams) error {
	_, err := q.db.Exec(ctx, updateOperator, arg.ID, arg.Name, arg.Jwt)
	return err
}
