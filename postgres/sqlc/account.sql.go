// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: account.sql

package sqlc

import (
	"context"

	"time"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO account (id, namespace_id, operator_id, name, public_key, jwt, user_jwt_duration)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateAccountParams struct {
	ID              string         `json:"id"`
	NamespaceID     string         `json:"namespace_id"`
	OperatorID      string         `json:"operator_id"`
	Name            string         `json:"name"`
	PublicKey       string         `json:"public_key"`
	Jwt             string         `json:"jwt"`
	UserJwtDuration *time.Duration `json:"user_jwt_duration"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.Exec(ctx, createAccount,
		arg.ID,
		arg.NamespaceID,
		arg.OperatorID,
		arg.Name,
		arg.PublicKey,
		arg.Jwt,
		arg.UserJwtDuration,
	)
	return err
}

const deleteAccount = `-- name: DeleteAccount :exec
SELECT delete_account_and_nkeys($1)
`

func (q *Queries) DeleteAccount(ctx context.Context, accountID string) error {
	_, err := q.db.Exec(ctx, deleteAccount, accountID)
	return err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, namespace_id, operator_id, name, public_key, jwt, user_jwt_duration
FROM account
WHERE operator_id = $1
  AND ($2::TEXT IS NULL OR id <= $2::TEXT)
  AND name != 'SYS'
ORDER BY id DESC
    LIMIT $3
`

type ListAccountsParams struct {
	OperatorID string  `json:"operator_id"`
	Cursor     *string `json:"cursor"`
	Size       int32   `json:"size"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]*Account, error) {
	rows, err := q.db.Query(ctx, listAccounts, arg.OperatorID, arg.Cursor, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.NamespaceID,
			&i.OperatorID,
			&i.Name,
			&i.PublicKey,
			&i.Jwt,
			&i.UserJwtDuration,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readAccount = `-- name: ReadAccount :one
SELECT id, namespace_id, operator_id, name, public_key, jwt, user_jwt_duration
FROM account
WHERE id = $1
`

func (q *Queries) ReadAccount(ctx context.Context, id string) (*Account, error) {
	row := q.db.QueryRow(ctx, readAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.NamespaceID,
		&i.OperatorID,
		&i.Name,
		&i.PublicKey,
		&i.Jwt,
		&i.UserJwtDuration,
	)
	return &i, err
}

const readAccountByPublicKey = `-- name: ReadAccountByPublicKey :one
SELECT id, namespace_id, operator_id, name, public_key, jwt, user_jwt_duration
FROM account
WHERE public_key = $1
`

func (q *Queries) ReadAccountByPublicKey(ctx context.Context, publicKey string) (*Account, error) {
	row := q.db.QueryRow(ctx, readAccountByPublicKey, publicKey)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.NamespaceID,
		&i.OperatorID,
		&i.Name,
		&i.PublicKey,
		&i.Jwt,
		&i.UserJwtDuration,
	)
	return &i, err
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE account
SET name              = $2,
    jwt               = $3,
    user_jwt_duration = $4
WHERE id = $1
`

type UpdateAccountParams struct {
	ID              string         `json:"id"`
	Name            string         `json:"name"`
	Jwt             string         `json:"jwt"`
	UserJwtDuration *time.Duration `json:"user_jwt_duration"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.Exec(ctx, updateAccount,
		arg.ID,
		arg.Name,
		arg.Jwt,
		arg.UserJwtDuration,
	)
	return err
}
