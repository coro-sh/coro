// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: namespace.sql

package sqlc

import (
	"context"
)

const createNamespace = `-- name: CreateNamespace :exec
INSERT INTO namespace (id, name)
VALUES ($1, $2)
`

type CreateNamespaceParams struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) CreateNamespace(ctx context.Context, arg CreateNamespaceParams) error {
	_, err := q.db.Exec(ctx, createNamespace, arg.ID, arg.Name)
	return err
}

const deleteNamespace = `-- name: DeleteNamespace :exec
SELECT delete_namespace_and_nkeys($1)
`

func (q *Queries) DeleteNamespace(ctx context.Context, namespaceID string) error {
	_, err := q.db.Exec(ctx, deleteNamespace, namespaceID)
	return err
}

const listNamespaces = `-- name: ListNamespaces :many
SELECT id, name
FROM namespace
WHERE ($1::TEXT IS NULL OR id <= $1::TEXT)
  AND name != 'coro_internal'
ORDER BY id DESC
LIMIT $2
`

type ListNamespacesParams struct {
	Cursor *string `json:"cursor"`
	Size   int32   `json:"size"`
}

func (q *Queries) ListNamespaces(ctx context.Context, arg ListNamespacesParams) ([]*Namespace, error) {
	rows, err := q.db.Query(ctx, listNamespaces, arg.Cursor, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Namespace
	for rows.Next() {
		var i Namespace
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readNamespace = `-- name: ReadNamespace :one
SELECT id, name
FROM namespace
WHERE id = $1
`

func (q *Queries) ReadNamespace(ctx context.Context, id string) (*Namespace, error) {
	row := q.db.QueryRow(ctx, readNamespace, id)
	var i Namespace
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}

const readNamespaceByName = `-- name: ReadNamespaceByName :one
SELECT id, name
FROM namespace
WHERE name = $1
`

func (q *Queries) ReadNamespaceByName(ctx context.Context, name string) (*Namespace, error) {
	row := q.db.QueryRow(ctx, readNamespaceByName, name)
	var i Namespace
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}
