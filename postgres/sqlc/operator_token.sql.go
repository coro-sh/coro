// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: operator_token.sql

package sqlc

import (
	"context"
)

const readOperatorToken = `-- name: ReadOperatorToken :one
SELECT operator_token.token
FROM operator_token
WHERE operator_id = $1
  AND type = $2
`

type ReadOperatorTokenParams struct {
	OperatorID string `json:"operator_id"`
	Type       string `json:"type"`
}

func (q *Queries) ReadOperatorToken(ctx context.Context, arg ReadOperatorTokenParams) (string, error) {
	row := q.db.QueryRow(ctx, readOperatorToken, arg.OperatorID, arg.Type)
	var token string
	err := row.Scan(&token)
	return token, err
}

const upsertOperatorToken = `-- name: UpsertOperatorToken :exec
INSERT INTO operator_token (operator_id, type, token)
VALUES ($1, $2, $3)
ON CONFLICT (operator_id, type)
    DO UPDATE SET token = excluded.token
`

type UpsertOperatorTokenParams struct {
	OperatorID string `json:"operator_id"`
	Type       string `json:"type"`
	Token      string `json:"token"`
}

func (q *Queries) UpsertOperatorToken(ctx context.Context, arg UpsertOperatorTokenParams) error {
	_, err := q.db.Exec(ctx, upsertOperatorToken, arg.OperatorID, arg.Type, arg.Token)
	return err
}
