// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"time"
)

type NkeyType string

const (
	NkeyTypeOperator NkeyType = "operator"
	NkeyTypeAccount  NkeyType = "account"
	NkeyTypeUser     NkeyType = "user"
)

func (e *NkeyType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NkeyType(s)
	case string:
		*e = NkeyType(s)
	default:
		return fmt.Errorf("unsupported scan type for NkeyType: %T", src)
	}
	return nil
}

type NullNkeyType struct {
	NkeyType NkeyType `json:"nkey_type"`
	Valid    bool     `json:"valid"` // Valid is true if NkeyType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNkeyType) Scan(value interface{}) error {
	if value == nil {
		ns.NkeyType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NkeyType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNkeyType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NkeyType), nil
}

func (e NkeyType) Valid() bool {
	switch e {
	case NkeyTypeOperator,
		NkeyTypeAccount,
		NkeyTypeUser:
		return true
	}
	return false
}

func AllNkeyTypeValues() []NkeyType {
	return []NkeyType{
		NkeyTypeOperator,
		NkeyTypeAccount,
		NkeyTypeUser,
	}
}

type Account struct {
	ID              string         `json:"id"`
	NamespaceID     string         `json:"namespace_id"`
	OperatorID      string         `json:"operator_id"`
	Name            string         `json:"name"`
	PublicKey       string         `json:"public_key"`
	Jwt             string         `json:"jwt"`
	UserJwtDuration *time.Duration `json:"user_jwt_duration"`
}

type Namespace struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Nkey struct {
	ID   string   `json:"id"`
	Type NkeyType `json:"type"`
	Seed []byte   `json:"seed"`
}

type Operator struct {
	ID          string `json:"id"`
	NamespaceID string `json:"namespace_id"`
	Name        string `json:"name"`
	PublicKey   string `json:"public_key"`
	Jwt         string `json:"jwt"`
}

type OperatorToken struct {
	OperatorID string `json:"operator_id"`
	Type       string `json:"type"`
	Token      string `json:"token"`
}

type SigningKey struct {
	ID   string   `json:"id"`
	Type NkeyType `json:"type"`
	Seed []byte   `json:"seed"`
}

type User struct {
	ID          string         `json:"id"`
	NamespaceID string         `json:"namespace_id"`
	OperatorID  string         `json:"operator_id"`
	AccountID   string         `json:"account_id"`
	Name        string         `json:"name"`
	Jwt         string         `json:"jwt"`
	JwtDuration *time.Duration `json:"jwt_duration"`
}

type UserJwtIssuance struct {
	UserID     string `json:"user_id"`
	IssueTime  int64  `json:"issue_time"`
	ExpireTime int64  `json:"expire_time"`
}
