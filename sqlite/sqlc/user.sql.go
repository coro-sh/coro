// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO user (id, namespace_id, operator_id, account_id, name, jwt, jwt_duration)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7)
`

type CreateUserParams struct {
	ID          string
	NamespaceID string
	OperatorID  string
	AccountID   string
	Name        string
	Jwt         string
	JwtDuration *int64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.NamespaceID,
		arg.OperatorID,
		arg.AccountID,
		arg.Name,
		arg.Jwt,
		arg.JwtDuration,
	)
	return err
}

const createUserJWTIssuance = `-- name: CreateUserJWTIssuance :exec
INSERT INTO user_jwt_issuances (user_id, issue_time, expire_time)
VALUES (?1, ?2, ?3)
`

type CreateUserJWTIssuanceParams struct {
	UserID     string
	IssueTime  int64
	ExpireTime int64
}

func (q *Queries) CreateUserJWTIssuance(ctx context.Context, arg CreateUserJWTIssuanceParams) error {
	_, err := q.db.ExecContext(ctx, createUserJWTIssuance, arg.UserID, arg.IssueTime, arg.ExpireTime)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM user
WHERE id = ?1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const listUserJWTIssuances = `-- name: ListUserJWTIssuances :many
SELECT user_id, issue_time, expire_time
FROM user_jwt_issuances
WHERE user_id = ?1
  AND (?2 IS NULL OR issue_time <= ?2)
ORDER BY issue_time DESC
LIMIT ?3
`

type ListUserJWTIssuancesParams struct {
	UserID string
	Cursor interface{}
	Size   int64
}

func (q *Queries) ListUserJWTIssuances(ctx context.Context, arg ListUserJWTIssuancesParams) ([]*UserJwtIssuance, error) {
	rows, err := q.db.QueryContext(ctx, listUserJWTIssuances, arg.UserID, arg.Cursor, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*UserJwtIssuance
	for rows.Next() {
		var i UserJwtIssuance
		if err := rows.Scan(&i.UserID, &i.IssueTime, &i.ExpireTime); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, namespace_id, operator_id, account_id, name, jwt, jwt_duration
FROM user
WHERE account_id = ?1
  AND (?2 IS NULL OR id <= ?2)
ORDER BY id DESC
LIMIT ?3
`

type ListUsersParams struct {
	AccountID string
	Cursor    interface{}
	Size      int64
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]*User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.AccountID, arg.Cursor, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.NamespaceID,
			&i.OperatorID,
			&i.AccountID,
			&i.Name,
			&i.Jwt,
			&i.JwtDuration,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readUser = `-- name: ReadUser :one
SELECT id, namespace_id, operator_id, account_id, name, jwt, jwt_duration
FROM user
WHERE id = ?1
`

func (q *Queries) ReadUser(ctx context.Context, id string) (*User, error) {
	row := q.db.QueryRowContext(ctx, readUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.NamespaceID,
		&i.OperatorID,
		&i.AccountID,
		&i.Name,
		&i.Jwt,
		&i.JwtDuration,
	)
	return &i, err
}

const readUserByName = `-- name: ReadUserByName :one
SELECT id, namespace_id, operator_id, account_id, name, jwt, jwt_duration
FROM user
WHERE operator_id = ?1
  AND account_id = ?2
  AND name = ?3
`

type ReadUserByNameParams struct {
	OperatorID string
	AccountID  string
	Name       string
}

func (q *Queries) ReadUserByName(ctx context.Context, arg ReadUserByNameParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, readUserByName, arg.OperatorID, arg.AccountID, arg.Name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.NamespaceID,
		&i.OperatorID,
		&i.AccountID,
		&i.Name,
		&i.Jwt,
		&i.JwtDuration,
	)
	return &i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE user
SET name         = ?2,
    jwt          = ?3,
    jwt_duration = ?4
WHERE id = ?1
`

type UpdateUserParams struct {
	ID          string
	Name        string
	Jwt         string
	JwtDuration *int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Jwt,
		arg.JwtDuration,
	)
	return err
}
