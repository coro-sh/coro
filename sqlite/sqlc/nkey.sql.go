// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: nkey.sql

package sqlc

import (
	"context"
)

const createNkey = `-- name: CreateNkey :exec
INSERT INTO nkey (id, type, seed)
VALUES (?1, ?2, ?3)
`

type CreateNkeyParams struct {
	ID   string
	Type string
	Seed []byte
}

func (q *Queries) CreateNkey(ctx context.Context, arg CreateNkeyParams) error {
	_, err := q.db.ExecContext(ctx, createNkey, arg.ID, arg.Type, arg.Seed)
	return err
}

const createSigningKey = `-- name: CreateSigningKey :exec
INSERT INTO signing_key (id, type, seed)
VALUES (?1, ?2, ?3)
`

type CreateSigningKeyParams struct {
	ID   string
	Type string
	Seed []byte
}

func (q *Queries) CreateSigningKey(ctx context.Context, arg CreateSigningKeyParams) error {
	_, err := q.db.ExecContext(ctx, createSigningKey, arg.ID, arg.Type, arg.Seed)
	return err
}

const readNkey = `-- name: ReadNkey :one
SELECT id, type, seed
FROM nkey
WHERE id = ?1
`

func (q *Queries) ReadNkey(ctx context.Context, id string) (*Nkey, error) {
	row := q.db.QueryRowContext(ctx, readNkey, id)
	var i Nkey
	err := row.Scan(&i.ID, &i.Type, &i.Seed)
	return &i, err
}

const readSigningKey = `-- name: ReadSigningKey :one
SELECT id, type, seed
FROM signing_key
WHERE id = ?1
`

func (q *Queries) ReadSigningKey(ctx context.Context, id string) (*SigningKey, error) {
	row := q.db.QueryRowContext(ctx, readSigningKey, id)
	var i SigningKey
	err := row.Scan(&i.ID, &i.Type, &i.Seed)
	return &i, err
}
