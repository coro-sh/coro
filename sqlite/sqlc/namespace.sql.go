// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: namespace.sql

package sqlc

import (
	"context"
	"strings"
)

const batchReadNamespaces = `-- name: BatchReadNamespaces :many
SELECT id, name
FROM namespace
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) BatchReadNamespaces(ctx context.Context, ids []string) ([]*Namespace, error) {
	query := batchReadNamespaces
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Namespace
	for rows.Next() {
		var i Namespace
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createNamespace = `-- name: CreateNamespace :exec
INSERT INTO namespace (id, name)
VALUES (?1, ?2)
`

type CreateNamespaceParams struct {
	ID   string
	Name string
}

func (q *Queries) CreateNamespace(ctx context.Context, arg CreateNamespaceParams) error {
	_, err := q.db.ExecContext(ctx, createNamespace, arg.ID, arg.Name)
	return err
}

const deleteNamespace = `-- name: DeleteNamespace :exec
DELETE
FROM namespace
WHERE id = ?1
`

func (q *Queries) DeleteNamespace(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteNamespace, id)
	return err
}

const listNamespaces = `-- name: ListNamespaces :many
SELECT id, name
FROM namespace
WHERE (?1 IS NULL OR id <= ?1)
  AND name != 'coro_internal'
ORDER BY id DESC
LIMIT ?2
`

type ListNamespacesParams struct {
	Cursor interface{}
	Size   int64
}

func (q *Queries) ListNamespaces(ctx context.Context, arg ListNamespacesParams) ([]*Namespace, error) {
	rows, err := q.db.QueryContext(ctx, listNamespaces, arg.Cursor, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Namespace
	for rows.Next() {
		var i Namespace
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readNamespace = `-- name: ReadNamespace :one
SELECT id, name
FROM namespace
WHERE id = ?1
`

func (q *Queries) ReadNamespace(ctx context.Context, id string) (*Namespace, error) {
	row := q.db.QueryRowContext(ctx, readNamespace, id)
	var i Namespace
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}

const readNamespaceByName = `-- name: ReadNamespaceByName :one
SELECT id, name
FROM namespace
WHERE name = ?1
`

func (q *Queries) ReadNamespaceByName(ctx context.Context, name string) (*Namespace, error) {
	row := q.db.QueryRowContext(ctx, readNamespaceByName, name)
	var i Namespace
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}
