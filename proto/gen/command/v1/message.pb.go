// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: command/v1/message.proto

package commandv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PublishMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier of the published message.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Subject of the command reply inbox if a response(s) is expected from the
	// command. Can be left empty if no response is expected.
	CommandReplyInbox string `protobuf:"bytes,2,opt,name=command_reply_inbox,json=commandReplyInbox,proto3" json:"command_reply_inbox,omitempty"`
	// Command to perform on the downstream NATS server.
	//
	// Types that are valid to be assigned to Command:
	//
	//	*PublishMessage_Request
	//	*PublishMessage_ListStream
	//	*PublishMessage_StartConsumer
	//	*PublishMessage_StopConsumer
	//	*PublishMessage_SendConsumerHeartbeat
	Command       isPublishMessage_Command `protobuf_oneof:"command"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishMessage) Reset() {
	*x = PublishMessage{}
	mi := &file_command_v1_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishMessage) ProtoMessage() {}

func (x *PublishMessage) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishMessage.ProtoReflect.Descriptor instead.
func (*PublishMessage) Descriptor() ([]byte, []int) {
	return file_command_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *PublishMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PublishMessage) GetCommandReplyInbox() string {
	if x != nil {
		return x.CommandReplyInbox
	}
	return ""
}

func (x *PublishMessage) GetCommand() isPublishMessage_Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *PublishMessage) GetRequest() *PublishMessage_CommandRequest {
	if x != nil {
		if x, ok := x.Command.(*PublishMessage_Request); ok {
			return x.Request
		}
	}
	return nil
}

func (x *PublishMessage) GetListStream() *PublishMessage_CommandListStreams {
	if x != nil {
		if x, ok := x.Command.(*PublishMessage_ListStream); ok {
			return x.ListStream
		}
	}
	return nil
}

func (x *PublishMessage) GetStartConsumer() *PublishMessage_CommandStartConsumer {
	if x != nil {
		if x, ok := x.Command.(*PublishMessage_StartConsumer); ok {
			return x.StartConsumer
		}
	}
	return nil
}

func (x *PublishMessage) GetStopConsumer() *PublishMessage_CommandStopConsumer {
	if x != nil {
		if x, ok := x.Command.(*PublishMessage_StopConsumer); ok {
			return x.StopConsumer
		}
	}
	return nil
}

func (x *PublishMessage) GetSendConsumerHeartbeat() *PublishMessage_CommandSendConsumerHeartbeat {
	if x != nil {
		if x, ok := x.Command.(*PublishMessage_SendConsumerHeartbeat); ok {
			return x.SendConsumerHeartbeat
		}
	}
	return nil
}

type isPublishMessage_Command interface {
	isPublishMessage_Command()
}

type PublishMessage_Request struct {
	// Publish a message to the downstream NATS server and block until a reply
	// is received.
	Request *PublishMessage_CommandRequest `protobuf:"bytes,3,opt,name=request,proto3,oneof"`
}

type PublishMessage_ListStream struct {
	// List JetStream streams that exists on the downstream NATS server.
	ListStream *PublishMessage_CommandListStreams `protobuf:"bytes,4,opt,name=list_stream,json=listStream,proto3,oneof"`
}

type PublishMessage_StartConsumer struct {
	// Start an ephemeral JetStream consumer on a stream that exists on the
	// downstream NATS server.
	StartConsumer *PublishMessage_CommandStartConsumer `protobuf:"bytes,5,opt,name=start_consumer,json=startConsumer,proto3,oneof"`
}

type PublishMessage_StopConsumer struct {
	// Stop a consumer.
	StopConsumer *PublishMessage_CommandStopConsumer `protobuf:"bytes,6,opt,name=stop_consumer,json=stopConsumer,proto3,oneof"`
}

type PublishMessage_SendConsumerHeartbeat struct {
	// Send a consumer heartbeat to keep the connection alive.
	// Heartbeats should be sent every 15s, but a max of 30s is permitted before
	// the consumer is stopped due to inactivity.
	SendConsumerHeartbeat *PublishMessage_CommandSendConsumerHeartbeat `protobuf:"bytes,7,opt,name=send_consumer_heartbeat,json=sendConsumerHeartbeat,proto3,oneof"`
}

func (*PublishMessage_Request) isPublishMessage_Command() {}

func (*PublishMessage_ListStream) isPublishMessage_Command() {}

func (*PublishMessage_StartConsumer) isPublishMessage_Command() {}

func (*PublishMessage_StopConsumer) isPublishMessage_Command() {}

func (*PublishMessage_SendConsumerHeartbeat) isPublishMessage_Command() {}

type ReplyMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier of the reply message.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Subject of the reply inbox.
	Inbox string `protobuf:"bytes,2,opt,name=inbox,proto3" json:"inbox,omitempty"`
	// Content of the reply message.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Error message if the published command failed to be handled.
	Error         *string `protobuf:"bytes,4,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplyMessage) Reset() {
	*x = ReplyMessage{}
	mi := &file_command_v1_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyMessage) ProtoMessage() {}

func (x *ReplyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyMessage.ProtoReflect.Descriptor instead.
func (*ReplyMessage) Descriptor() ([]byte, []int) {
	return file_command_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *ReplyMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReplyMessage) GetInbox() string {
	if x != nil {
		return x.Inbox
	}
	return ""
}

func (x *ReplyMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReplyMessage) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type Credentials struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Jwt           string                 `protobuf:"bytes,1,opt,name=jwt,proto3" json:"jwt,omitempty"`
	Seed          string                 `protobuf:"bytes,2,opt,name=seed,proto3" json:"seed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	mi := &file_command_v1_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_command_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *Credentials) GetJwt() string {
	if x != nil {
		return x.Jwt
	}
	return ""
}

func (x *Credentials) GetSeed() string {
	if x != nil {
		return x.Seed
	}
	return ""
}

type PublishMessage_CommandRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Subject on the downstream NATS server to publish the request message on.
	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// Content of the request message.
	Data          []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishMessage_CommandRequest) Reset() {
	*x = PublishMessage_CommandRequest{}
	mi := &file_command_v1_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishMessage_CommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishMessage_CommandRequest) ProtoMessage() {}

func (x *PublishMessage_CommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishMessage_CommandRequest.ProtoReflect.Descriptor instead.
func (*PublishMessage_CommandRequest) Descriptor() ([]byte, []int) {
	return file_command_v1_message_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PublishMessage_CommandRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *PublishMessage_CommandRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PublishMessage_CommandListStreams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserCreds     *Credentials           `protobuf:"bytes,1,opt,name=user_creds,json=userCreds,proto3" json:"user_creds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishMessage_CommandListStreams) Reset() {
	*x = PublishMessage_CommandListStreams{}
	mi := &file_command_v1_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishMessage_CommandListStreams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishMessage_CommandListStreams) ProtoMessage() {}

func (x *PublishMessage_CommandListStreams) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishMessage_CommandListStreams.ProtoReflect.Descriptor instead.
func (*PublishMessage_CommandListStreams) Descriptor() ([]byte, []int) {
	return file_command_v1_message_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PublishMessage_CommandListStreams) GetUserCreds() *Credentials {
	if x != nil {
		return x.UserCreds
	}
	return nil
}

type PublishMessage_CommandStartConsumer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier of the ephemeral JetStream consumer.
	ConsumerId string `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	// Stream to create the ephemeral consumer on.
	StreamName string `protobuf:"bytes,2,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	// User credentials to use when creating a new client connection.
	UserCreds     *Credentials `protobuf:"bytes,3,opt,name=user_creds,json=userCreds,proto3" json:"user_creds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishMessage_CommandStartConsumer) Reset() {
	*x = PublishMessage_CommandStartConsumer{}
	mi := &file_command_v1_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishMessage_CommandStartConsumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishMessage_CommandStartConsumer) ProtoMessage() {}

func (x *PublishMessage_CommandStartConsumer) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishMessage_CommandStartConsumer.ProtoReflect.Descriptor instead.
func (*PublishMessage_CommandStartConsumer) Descriptor() ([]byte, []int) {
	return file_command_v1_message_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PublishMessage_CommandStartConsumer) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

func (x *PublishMessage_CommandStartConsumer) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *PublishMessage_CommandStartConsumer) GetUserCreds() *Credentials {
	if x != nil {
		return x.UserCreds
	}
	return nil
}

type PublishMessage_CommandStopConsumer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier of the ephemeral JetStream consumer.
	ConsumerId    string `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishMessage_CommandStopConsumer) Reset() {
	*x = PublishMessage_CommandStopConsumer{}
	mi := &file_command_v1_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishMessage_CommandStopConsumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishMessage_CommandStopConsumer) ProtoMessage() {}

func (x *PublishMessage_CommandStopConsumer) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishMessage_CommandStopConsumer.ProtoReflect.Descriptor instead.
func (*PublishMessage_CommandStopConsumer) Descriptor() ([]byte, []int) {
	return file_command_v1_message_proto_rawDescGZIP(), []int{0, 3}
}

func (x *PublishMessage_CommandStopConsumer) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

type PublishMessage_CommandSendConsumerHeartbeat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier of the ephemeral JetStream consumer.
	ConsumerId    string `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishMessage_CommandSendConsumerHeartbeat) Reset() {
	*x = PublishMessage_CommandSendConsumerHeartbeat{}
	mi := &file_command_v1_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishMessage_CommandSendConsumerHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishMessage_CommandSendConsumerHeartbeat) ProtoMessage() {}

func (x *PublishMessage_CommandSendConsumerHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishMessage_CommandSendConsumerHeartbeat.ProtoReflect.Descriptor instead.
func (*PublishMessage_CommandSendConsumerHeartbeat) Descriptor() ([]byte, []int) {
	return file_command_v1_message_proto_rawDescGZIP(), []int{0, 4}
}

func (x *PublishMessage_CommandSendConsumerHeartbeat) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

var File_command_v1_message_proto protoreflect.FileDescriptor

const file_command_v1_message_proto_rawDesc = "" +
	"\n" +
	"\x18command/v1/message.proto\x12\n" +
	"command.v1\"\xb2\a\n" +
	"\x0ePublishMessage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12.\n" +
	"\x13command_reply_inbox\x18\x02 \x01(\tR\x11commandReplyInbox\x12E\n" +
	"\arequest\x18\x03 \x01(\v2).command.v1.PublishMessage.CommandRequestH\x00R\arequest\x12P\n" +
	"\vlist_stream\x18\x04 \x01(\v2-.command.v1.PublishMessage.CommandListStreamsH\x00R\n" +
	"listStream\x12X\n" +
	"\x0estart_consumer\x18\x05 \x01(\v2/.command.v1.PublishMessage.CommandStartConsumerH\x00R\rstartConsumer\x12U\n" +
	"\rstop_consumer\x18\x06 \x01(\v2..command.v1.PublishMessage.CommandStopConsumerH\x00R\fstopConsumer\x12q\n" +
	"\x17send_consumer_heartbeat\x18\a \x01(\v27.command.v1.PublishMessage.CommandSendConsumerHeartbeatH\x00R\x15sendConsumerHeartbeat\x1a>\n" +
	"\x0eCommandRequest\x12\x18\n" +
	"\asubject\x18\x01 \x01(\tR\asubject\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x1aL\n" +
	"\x12CommandListStreams\x126\n" +
	"\n" +
	"user_creds\x18\x01 \x01(\v2\x17.command.v1.CredentialsR\tuserCreds\x1a\x90\x01\n" +
	"\x14CommandStartConsumer\x12\x1f\n" +
	"\vconsumer_id\x18\x01 \x01(\tR\n" +
	"consumerId\x12\x1f\n" +
	"\vstream_name\x18\x02 \x01(\tR\n" +
	"streamName\x126\n" +
	"\n" +
	"user_creds\x18\x03 \x01(\v2\x17.command.v1.CredentialsR\tuserCreds\x1a6\n" +
	"\x13CommandStopConsumer\x12\x1f\n" +
	"\vconsumer_id\x18\x01 \x01(\tR\n" +
	"consumerId\x1a?\n" +
	"\x1cCommandSendConsumerHeartbeat\x12\x1f\n" +
	"\vconsumer_id\x18\x01 \x01(\tR\n" +
	"consumerIdB\t\n" +
	"\acommand\"m\n" +
	"\fReplyMessage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05inbox\x18\x02 \x01(\tR\x05inbox\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\x12\x19\n" +
	"\x05error\x18\x04 \x01(\tH\x00R\x05error\x88\x01\x01B\b\n" +
	"\x06_error\"3\n" +
	"\vCredentials\x12\x10\n" +
	"\x03jwt\x18\x01 \x01(\tR\x03jwt\x12\x12\n" +
	"\x04seed\x18\x02 \x01(\tR\x04seedB\x9f\x01\n" +
	"\x0ecom.command.v1B\fMessageProtoP\x01Z6github.com/coro-sh/coro/proto/gen/command/v1;commandv1\xa2\x02\x03CXX\xaa\x02\n" +
	"Command.V1\xca\x02\n" +
	"Command\\V1\xe2\x02\x16Command\\V1\\GPBMetadata\xea\x02\vCommand::V1b\x06proto3"

var (
	file_command_v1_message_proto_rawDescOnce sync.Once
	file_command_v1_message_proto_rawDescData []byte
)

func file_command_v1_message_proto_rawDescGZIP() []byte {
	file_command_v1_message_proto_rawDescOnce.Do(func() {
		file_command_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_command_v1_message_proto_rawDesc), len(file_command_v1_message_proto_rawDesc)))
	})
	return file_command_v1_message_proto_rawDescData
}

var file_command_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_command_v1_message_proto_goTypes = []any{
	(*PublishMessage)(nil),                              // 0: command.v1.PublishMessage
	(*ReplyMessage)(nil),                                // 1: command.v1.ReplyMessage
	(*Credentials)(nil),                                 // 2: command.v1.Credentials
	(*PublishMessage_CommandRequest)(nil),               // 3: command.v1.PublishMessage.CommandRequest
	(*PublishMessage_CommandListStreams)(nil),           // 4: command.v1.PublishMessage.CommandListStreams
	(*PublishMessage_CommandStartConsumer)(nil),         // 5: command.v1.PublishMessage.CommandStartConsumer
	(*PublishMessage_CommandStopConsumer)(nil),          // 6: command.v1.PublishMessage.CommandStopConsumer
	(*PublishMessage_CommandSendConsumerHeartbeat)(nil), // 7: command.v1.PublishMessage.CommandSendConsumerHeartbeat
}
var file_command_v1_message_proto_depIdxs = []int32{
	3, // 0: command.v1.PublishMessage.request:type_name -> command.v1.PublishMessage.CommandRequest
	4, // 1: command.v1.PublishMessage.list_stream:type_name -> command.v1.PublishMessage.CommandListStreams
	5, // 2: command.v1.PublishMessage.start_consumer:type_name -> command.v1.PublishMessage.CommandStartConsumer
	6, // 3: command.v1.PublishMessage.stop_consumer:type_name -> command.v1.PublishMessage.CommandStopConsumer
	7, // 4: command.v1.PublishMessage.send_consumer_heartbeat:type_name -> command.v1.PublishMessage.CommandSendConsumerHeartbeat
	2, // 5: command.v1.PublishMessage.CommandListStreams.user_creds:type_name -> command.v1.Credentials
	2, // 6: command.v1.PublishMessage.CommandStartConsumer.user_creds:type_name -> command.v1.Credentials
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_command_v1_message_proto_init() }
func file_command_v1_message_proto_init() {
	if File_command_v1_message_proto != nil {
		return
	}
	file_command_v1_message_proto_msgTypes[0].OneofWrappers = []any{
		(*PublishMessage_Request)(nil),
		(*PublishMessage_ListStream)(nil),
		(*PublishMessage_StartConsumer)(nil),
		(*PublishMessage_StopConsumer)(nil),
		(*PublishMessage_SendConsumerHeartbeat)(nil),
	}
	file_command_v1_message_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_command_v1_message_proto_rawDesc), len(file_command_v1_message_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_command_v1_message_proto_goTypes,
		DependencyIndexes: file_command_v1_message_proto_depIdxs,
		MessageInfos:      file_command_v1_message_proto_msgTypes,
	}.Build()
	File_command_v1_message_proto = out.File
	file_command_v1_message_proto_goTypes = nil
	file_command_v1_message_proto_depIdxs = nil
}
