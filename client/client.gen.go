// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Account defines model for Account.
type Account struct {
	// Id Account ID
	Id string `json:"id"`

	// Jwt Raw account JWT
	Jwt    string        `json:"jwt"`
	Limits AccountLimits `json:"limits"`
	Name   string        `json:"name"`

	// NamespaceId Namespace ID
	NamespaceId string `json:"namespace_id"`

	// OperatorId The operator owning this account
	OperatorId string `json:"operator_id"`

	// PublicKey NATS public key for this account
	PublicKey string `json:"public_key"`
}

// AccountLimits defines model for AccountLimits.
type AccountLimits struct {
	Connections   *int `json:"connections"`
	Exports       *int `json:"exports"`
	Imports       *int `json:"imports"`
	PayloadSize   *int `json:"payload_size"`
	Subscriptions *int `json:"subscriptions"`

	// UserJwtDurationSecs Expiry duration (in seconds) for User JWTs under this Account
	UserJwtDurationSecs *int `json:"user_jwt_duration_secs"`
}

// CreateAccountRequest defines model for CreateAccountRequest.
type CreateAccountRequest struct {
	Limits *AccountLimits `json:"limits,omitempty"`
	Name   string         `json:"name"`
}

// CreateNamespaceRequest defines model for CreateNamespaceRequest.
type CreateNamespaceRequest struct {
	// Name The name of the Namespace
	Name string `json:"name"`
}

// CreateOperatorRequest defines model for CreateOperatorRequest.
type CreateOperatorRequest struct {
	// Name The name of the Operator
	Name string `json:"name"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Limits *UserLimits `json:"limits,omitempty"`
	Name   string      `json:"name"`
}

// Namespace defines model for Namespace.
type Namespace struct {
	// Id Namespace ID
	Id string `json:"id"`

	// Name Namespace name
	Name string `json:"name"`
}

// Operator Common response for Operator endpoints
type Operator struct {
	// Id Operator ID
	Id string `json:"id"`

	// Jwt Raw operator JWT
	Jwt string `json:"jwt"`

	// Name Operator name
	Name string `json:"name"`

	// NamespaceId Namespace ID
	NamespaceId string `json:"namespace_id"`

	// PublicKey NATS public key
	PublicKey string             `json:"public_key"`
	Status    OperatorNATSStatus `json:"status"`
}

// OperatorNATSStatus defines model for OperatorNATSStatus.
type OperatorNATSStatus struct {
	// ConnectTime unix time of when the Operator's NATS server connected via a Proxy Agent
	ConnectTime *int `json:"connect_time"`
	Connected   bool `json:"connected"`
}

// ResponseError defines model for ResponseError.
type ResponseError struct {
	Error struct {
		Details []string `json:"details"`
		Message string   `json:"message"`
	} `json:"error"`
}

// Stream JetStream stream
type Stream struct {
	// ConsumerCount Number of consumers
	ConsumerCount string `json:"consumer_count"`

	// CreateTime Unix milli timestamp of when the stream was created
	CreateTime int `json:"create_time"`

	// MessageCount Number of messages published
	MessageCount int `json:"message_count"`

	// Name Name of the stream
	Name string `json:"name"`

	// Subjects Stream subjects
	Subjects []string `json:"subjects"`
}

// StreamMessage JetStream stream message
type StreamMessage struct {
	// StreamSequence Stream sequence number of the message
	StreamSequence string `json:"stream_sequence"`

	// Timestamp Time that the message was originally sent on the stream
	Timestamp int `json:"timestamp"`
}

// StreamMessageContent JetStream stream message content
type StreamMessageContent struct {
	// Data Content of the message
	Data []byte `json:"data"`

	// StreamSequence Stream sequence number of the message
	StreamSequence string `json:"stream_sequence"`

	// Timestamp Time that the message was originally sent on the stream
	Timestamp int `json:"timestamp"`
}

// UpdateAccountRequest defines model for UpdateAccountRequest.
type UpdateAccountRequest struct {
	Limits *AccountLimits `json:"limits,omitempty"`
	Name   string         `json:"name"`
}

// UpdateOperatorRequest defines model for UpdateOperatorRequest.
type UpdateOperatorRequest struct {
	Name string `json:"name"`
}

// UpdateUserRequest Update a userâ€™s name or limits
type UpdateUserRequest struct {
	Limits *UserLimits `json:"limits,omitempty"`
	Name   string      `json:"name"`
}

// User Common response for User endpoints
type User struct {
	// AccountId Account ID
	AccountId string `json:"account_id"`

	// Id User ID
	Id string `json:"id"`

	// Jwt Raw user JWT
	Jwt    string     `json:"jwt"`
	Limits UserLimits `json:"limits"`

	// Name Name of the User
	Name string `json:"name"`

	// NamespaceId Namespace ID
	NamespaceId string `json:"namespace_id"`

	// OperatorId Operator ID
	OperatorId string `json:"operator_id"`
}

// UserJWTIssuance defines model for UserJWTIssuance.
type UserJWTIssuance struct {
	// Active Indicates if the issued JWT is currently active.
	Active bool `json:"active"`

	// ExpireTime Unix time of when the JWT will expire.
	ExpireTime *int `json:"expire_time"`

	// IssueTime Unix time of when the JWT was issued.
	IssueTime int `json:"issue_time"`
}

// UserLimits defines model for UserLimits.
type UserLimits struct {
	// JwtDurationSecs Expiry duration (in seconds) for the User's JWT. Only applied when the parent Account does not have a JWT expiry set for its User's.
	JwtDurationSecs *int `json:"jwt_duration_secs"`
	PayloadSize     *int `json:"payload_size"`
	Subscriptions   *int `json:"subscriptions"`
}

// PageCursor defines model for pageCursor.
type PageCursor = string

// PageSize defines model for pageSize.
type PageSize = int

// ListNamespacesParams defines parameters for ListNamespaces.
type ListNamespacesParams struct {
	// PageCursor Cursor for pagination (base64-encoded ID)
	PageCursor *PageCursor `form:"page_cursor,omitempty" json:"page_cursor,omitempty"`

	// PageSize Number of items per page
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// UpdateAccountJSONBody defines parameters for UpdateAccount.
type UpdateAccountJSONBody struct {
	Data *UpdateAccountRequest `json:"data,omitempty"`
}

// FetchStreamMessagesParams defines parameters for FetchStreamMessages.
type FetchStreamMessagesParams struct {
	// StartSequence The sequence number to start reading messages from.
	StartSequence *uint64 `form:"start_sequence,omitempty" json:"start_sequence,omitempty"`

	// BatchSize The number of messages to fetch.
	BatchSize *uint32 `form:"batch_size,omitempty" json:"batch_size,omitempty"`
}

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	// PageCursor Cursor for pagination (base64-encoded ID)
	PageCursor *PageCursor `form:"page_cursor,omitempty" json:"page_cursor,omitempty"`

	// PageSize Number of items per page
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// ListOperatorsParams defines parameters for ListOperators.
type ListOperatorsParams struct {
	// PageCursor Cursor for pagination (base64-encoded ID)
	PageCursor *PageCursor `form:"page_cursor,omitempty" json:"page_cursor,omitempty"`

	// PageSize Number of items per page
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// UpdateOperatorJSONBody defines parameters for UpdateOperator.
type UpdateOperatorJSONBody struct {
	Data *UpdateOperatorRequest `json:"data,omitempty"`
}

// ListAccountsParams defines parameters for ListAccounts.
type ListAccountsParams struct {
	// PageCursor Cursor for pagination (base64-encoded ID)
	PageCursor *PageCursor `form:"page_cursor,omitempty" json:"page_cursor,omitempty"`

	// PageSize Number of items per page
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CreateNamespaceJSONRequestBody defines body for CreateNamespace for application/json ContentType.
type CreateNamespaceJSONRequestBody = CreateNamespaceRequest

// UpdateAccountJSONRequestBody defines body for UpdateAccount for application/json ContentType.
type UpdateAccountJSONRequestBody UpdateAccountJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserRequest

// CreateOperatorJSONRequestBody defines body for CreateOperator for application/json ContentType.
type CreateOperatorJSONRequestBody = CreateOperatorRequest

// UpdateOperatorJSONRequestBody defines body for UpdateOperator for application/json ContentType.
type UpdateOperatorJSONRequestBody UpdateOperatorJSONBody

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody = CreateAccountRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// oapiClient which conforms to the OpenAPI3 specification for this service.
type oapiClient struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*oapiClient) error

// Creates a new oapiClient, with reasonable defaults
func newClient(server string, opts ...ClientOption) (*oapiClient, error) {
	// create a client with sane default values
	client := oapiClient{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *oapiClient) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *oapiClient) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type clientInterface interface {
	// ListNamespaces request
	ListNamespaces(ctx context.Context, params *ListNamespacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNamespaceWithBody request with any body
	CreateNamespaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNamespace(ctx context.Context, body CreateNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNamespace request
	DeleteNamespace(ctx context.Context, namespaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccount request
	DeleteAccount(ctx context.Context, namespaceId string, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccount request
	GetAccount(ctx context.Context, namespaceId string, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAccountWithBody request with any body
	UpdateAccountWithBody(ctx context.Context, namespaceId string, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAccount(ctx context.Context, namespaceId string, accountId string, body UpdateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStreams request
	ListStreams(ctx context.Context, namespaceId string, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStream request
	GetStream(ctx context.Context, namespaceId string, accountId string, streamName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchStreamMessages request
	FetchStreamMessages(ctx context.Context, namespaceId string, accountId string, streamName string, params *FetchStreamMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStreamMessageContent request
	GetStreamMessageContent(ctx context.Context, namespaceId string, accountId string, streamName string, streamSequence uint64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsers request
	ListUsers(ctx context.Context, namespaceId string, accountId string, params *ListUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserWithBody request with any body
	CreateUserWithBody(ctx context.Context, namespaceId string, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, namespaceId string, accountId string, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOperators request
	ListOperators(ctx context.Context, namespaceId string, params *ListOperatorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOperatorWithBody request with any body
	CreateOperatorWithBody(ctx context.Context, namespaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOperator(ctx context.Context, namespaceId string, body CreateOperatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOperator request
	DeleteOperator(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOperator request
	GetOperator(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOperatorWithBody request with any body
	UpdateOperatorWithBody(ctx context.Context, namespaceId string, operatorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOperator(ctx context.Context, namespaceId string, operatorId string, body UpdateOperatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAccounts request
	ListAccounts(ctx context.Context, namespaceId string, operatorId string, params *ListAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAccountWithBody request with any body
	CreateAccountWithBody(ctx context.Context, namespaceId string, operatorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAccount(ctx context.Context, namespaceId string, operatorId string, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOperatorNATSConfig request
	GetOperatorNATSConfig(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOperatorProxyConnectionStatus request
	GetOperatorProxyConnectionStatus(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateOperatorProxyToken request
	GenerateOperatorProxyToken(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, namespaceId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, namespaceId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserWithBody request with any body
	UpdateUserWithBody(ctx context.Context, namespaceId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUser(ctx context.Context, namespaceId string, userId string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserCreds request
	GetUserCreds(ctx context.Context, namespaceId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserJWTIssuances request
	ListUserJWTIssuances(ctx context.Context, namespaceId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *oapiClient) ListNamespaces(ctx context.Context, params *ListNamespacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newListNamespacesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) CreateNamespaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newCreateNamespaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) CreateNamespace(ctx context.Context, body CreateNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newCreateNamespaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) DeleteNamespace(ctx context.Context, namespaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newDeleteNamespaceRequest(c.Server, namespaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) DeleteAccount(ctx context.Context, namespaceId string, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newDeleteAccountRequest(c.Server, namespaceId, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) GetAccount(ctx context.Context, namespaceId string, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newGetAccountRequest(c.Server, namespaceId, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) UpdateAccountWithBody(ctx context.Context, namespaceId string, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newUpdateAccountRequestWithBody(c.Server, namespaceId, accountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) UpdateAccount(ctx context.Context, namespaceId string, accountId string, body UpdateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newUpdateAccountRequest(c.Server, namespaceId, accountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) ListStreams(ctx context.Context, namespaceId string, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newListStreamsRequest(c.Server, namespaceId, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) GetStream(ctx context.Context, namespaceId string, accountId string, streamName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newGetStreamRequest(c.Server, namespaceId, accountId, streamName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) FetchStreamMessages(ctx context.Context, namespaceId string, accountId string, streamName string, params *FetchStreamMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newFetchStreamMessagesRequest(c.Server, namespaceId, accountId, streamName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) GetStreamMessageContent(ctx context.Context, namespaceId string, accountId string, streamName string, streamSequence uint64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newGetStreamMessageContentRequest(c.Server, namespaceId, accountId, streamName, streamSequence)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) ListUsers(ctx context.Context, namespaceId string, accountId string, params *ListUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newListUsersRequest(c.Server, namespaceId, accountId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) CreateUserWithBody(ctx context.Context, namespaceId string, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newCreateUserRequestWithBody(c.Server, namespaceId, accountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) CreateUser(ctx context.Context, namespaceId string, accountId string, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newCreateUserRequest(c.Server, namespaceId, accountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) ListOperators(ctx context.Context, namespaceId string, params *ListOperatorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newListOperatorsRequest(c.Server, namespaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) CreateOperatorWithBody(ctx context.Context, namespaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newCreateOperatorRequestWithBody(c.Server, namespaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) CreateOperator(ctx context.Context, namespaceId string, body CreateOperatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newCreateOperatorRequest(c.Server, namespaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) DeleteOperator(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newDeleteOperatorRequest(c.Server, namespaceId, operatorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) GetOperator(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newGetOperatorRequest(c.Server, namespaceId, operatorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) UpdateOperatorWithBody(ctx context.Context, namespaceId string, operatorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newUpdateOperatorRequestWithBody(c.Server, namespaceId, operatorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) UpdateOperator(ctx context.Context, namespaceId string, operatorId string, body UpdateOperatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newUpdateOperatorRequest(c.Server, namespaceId, operatorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) ListAccounts(ctx context.Context, namespaceId string, operatorId string, params *ListAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newListAccountsRequest(c.Server, namespaceId, operatorId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) CreateAccountWithBody(ctx context.Context, namespaceId string, operatorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newCreateAccountRequestWithBody(c.Server, namespaceId, operatorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) CreateAccount(ctx context.Context, namespaceId string, operatorId string, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newCreateAccountRequest(c.Server, namespaceId, operatorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) GetOperatorNATSConfig(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newGetOperatorNATSConfigRequest(c.Server, namespaceId, operatorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) GetOperatorProxyConnectionStatus(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newGetOperatorProxyConnectionStatusRequest(c.Server, namespaceId, operatorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) GenerateOperatorProxyToken(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newGenerateOperatorProxyTokenRequest(c.Server, namespaceId, operatorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) DeleteUser(ctx context.Context, namespaceId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newDeleteUserRequest(c.Server, namespaceId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) GetUser(ctx context.Context, namespaceId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newGetUserRequest(c.Server, namespaceId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) UpdateUserWithBody(ctx context.Context, namespaceId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newUpdateUserRequestWithBody(c.Server, namespaceId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) UpdateUser(ctx context.Context, namespaceId string, userId string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newUpdateUserRequest(c.Server, namespaceId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) GetUserCreds(ctx context.Context, namespaceId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newGetUserCredsRequest(c.Server, namespaceId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *oapiClient) ListUserJWTIssuances(ctx context.Context, namespaceId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := newListUserJWTIssuancesRequest(c.Server, namespaceId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// newListNamespacesRequest generates requests for ListNamespaces
func newListNamespacesRequest(server string, params *ListNamespacesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newCreateNamespaceRequest calls the generic CreateNamespace builder with application/json body
func newCreateNamespaceRequest(server string, body CreateNamespaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newCreateNamespaceRequestWithBody(server, "application/json", bodyReader)
}

// newCreateNamespaceRequestWithBody generates requests for CreateNamespace with any type of body
func newCreateNamespaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// newDeleteNamespaceRequest generates requests for DeleteNamespace
func newDeleteNamespaceRequest(server string, namespaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newDeleteAccountRequest generates requests for DeleteAccount
func newDeleteAccountRequest(server string, namespaceId string, accountId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/accounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newGetAccountRequest generates requests for GetAccount
func newGetAccountRequest(server string, namespaceId string, accountId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/accounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newUpdateAccountRequest calls the generic UpdateAccount builder with application/json body
func newUpdateAccountRequest(server string, namespaceId string, accountId string, body UpdateAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newUpdateAccountRequestWithBody(server, namespaceId, accountId, "application/json", bodyReader)
}

// newUpdateAccountRequestWithBody generates requests for UpdateAccount with any type of body
func newUpdateAccountRequestWithBody(server string, namespaceId string, accountId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/accounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// newListStreamsRequest generates requests for ListStreams
func newListStreamsRequest(server string, namespaceId string, accountId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/accounts/%s/streams", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newGetStreamRequest generates requests for GetStream
func newGetStreamRequest(server string, namespaceId string, accountId string, streamName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "stream_name", runtime.ParamLocationPath, streamName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/accounts/%s/streams/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newFetchStreamMessagesRequest generates requests for FetchStreamMessages
func newFetchStreamMessagesRequest(server string, namespaceId string, accountId string, streamName string, params *FetchStreamMessagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "stream_name", runtime.ParamLocationPath, streamName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/accounts/%s/streams/%s/messages", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartSequence != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_sequence", runtime.ParamLocationQuery, *params.StartSequence); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BatchSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "batch_size", runtime.ParamLocationQuery, *params.BatchSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newGetStreamMessageContentRequest generates requests for GetStreamMessageContent
func newGetStreamMessageContentRequest(server string, namespaceId string, accountId string, streamName string, streamSequence uint64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "stream_name", runtime.ParamLocationPath, streamName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "stream_sequence", runtime.ParamLocationPath, streamSequence)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/accounts/%s/streams/%s/messages/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newListUsersRequest generates requests for ListUsers
func newListUsersRequest(server string, namespaceId string, accountId string, params *ListUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/accounts/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newCreateUserRequest calls the generic CreateUser builder with application/json body
func newCreateUserRequest(server string, namespaceId string, accountId string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newCreateUserRequestWithBody(server, namespaceId, accountId, "application/json", bodyReader)
}

// newCreateUserRequestWithBody generates requests for CreateUser with any type of body
func newCreateUserRequestWithBody(server string, namespaceId string, accountId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/accounts/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// newListOperatorsRequest generates requests for ListOperators
func newListOperatorsRequest(server string, namespaceId string, params *ListOperatorsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/operators", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newCreateOperatorRequest calls the generic CreateOperator builder with application/json body
func newCreateOperatorRequest(server string, namespaceId string, body CreateOperatorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newCreateOperatorRequestWithBody(server, namespaceId, "application/json", bodyReader)
}

// newCreateOperatorRequestWithBody generates requests for CreateOperator with any type of body
func newCreateOperatorRequestWithBody(server string, namespaceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/operators", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// newDeleteOperatorRequest generates requests for DeleteOperator
func newDeleteOperatorRequest(server string, namespaceId string, operatorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "operator_id", runtime.ParamLocationPath, operatorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/operators/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newGetOperatorRequest generates requests for GetOperator
func newGetOperatorRequest(server string, namespaceId string, operatorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "operator_id", runtime.ParamLocationPath, operatorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/operators/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newUpdateOperatorRequest calls the generic UpdateOperator builder with application/json body
func newUpdateOperatorRequest(server string, namespaceId string, operatorId string, body UpdateOperatorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newUpdateOperatorRequestWithBody(server, namespaceId, operatorId, "application/json", bodyReader)
}

// newUpdateOperatorRequestWithBody generates requests for UpdateOperator with any type of body
func newUpdateOperatorRequestWithBody(server string, namespaceId string, operatorId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "operator_id", runtime.ParamLocationPath, operatorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/operators/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// newListAccountsRequest generates requests for ListAccounts
func newListAccountsRequest(server string, namespaceId string, operatorId string, params *ListAccountsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "operator_id", runtime.ParamLocationPath, operatorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/operators/%s/accounts", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newCreateAccountRequest calls the generic CreateAccount builder with application/json body
func newCreateAccountRequest(server string, namespaceId string, operatorId string, body CreateAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newCreateAccountRequestWithBody(server, namespaceId, operatorId, "application/json", bodyReader)
}

// newCreateAccountRequestWithBody generates requests for CreateAccount with any type of body
func newCreateAccountRequestWithBody(server string, namespaceId string, operatorId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "operator_id", runtime.ParamLocationPath, operatorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/operators/%s/accounts", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// newGetOperatorNATSConfigRequest generates requests for GetOperatorNATSConfig
func newGetOperatorNATSConfigRequest(server string, namespaceId string, operatorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "operator_id", runtime.ParamLocationPath, operatorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/operators/%s/nats-config", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newGetOperatorProxyConnectionStatusRequest generates requests for GetOperatorProxyConnectionStatus
func newGetOperatorProxyConnectionStatusRequest(server string, namespaceId string, operatorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "operator_id", runtime.ParamLocationPath, operatorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/operators/%s/proxy/status", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newGenerateOperatorProxyTokenRequest generates requests for GenerateOperatorProxyToken
func newGenerateOperatorProxyTokenRequest(server string, namespaceId string, operatorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "operator_id", runtime.ParamLocationPath, operatorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/operators/%s/proxy/token", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newDeleteUserRequest generates requests for DeleteUser
func newDeleteUserRequest(server string, namespaceId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newGetUserRequest generates requests for GetUser
func newGetUserRequest(server string, namespaceId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newUpdateUserRequest calls the generic UpdateUser builder with application/json body
func newUpdateUserRequest(server string, namespaceId string, userId string, body UpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newUpdateUserRequestWithBody(server, namespaceId, userId, "application/json", bodyReader)
}

// newUpdateUserRequestWithBody generates requests for UpdateUser with any type of body
func newUpdateUserRequestWithBody(server string, namespaceId string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// newGetUserCredsRequest generates requests for GetUserCreds
func newGetUserCredsRequest(server string, namespaceId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/users/%s/creds", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newListUserJWTIssuancesRequest generates requests for ListUserJWTIssuances
func newListUserJWTIssuancesRequest(server string, namespaceId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/users/%s/issuances", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *oapiClient) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
} // clientWithResponses builds on clientInterface to offer response payloads
type clientWithResponses struct {
	clientInterface
}

// newClientWithResponses creates a new clientWithResponses, which wraps
// Client with return type handling
func newClientWithResponses(server string, opts ...ClientOption) (*clientWithResponses, error) {
	client, err := newClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &clientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *oapiClient) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// clientWithResponsesInterface is the interface specification for the client with responses above.
type clientWithResponsesInterface interface {
	// ListNamespacesWithResponse request
	ListNamespacesWithResponse(ctx context.Context, params *ListNamespacesParams, reqEditors ...RequestEditorFn) (*ListNamespacesResponse, error)

	// CreateNamespaceWithBodyWithResponse request with any body
	CreateNamespaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNamespaceResponse, error)

	CreateNamespaceWithResponse(ctx context.Context, body CreateNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNamespaceResponse, error)

	// DeleteNamespaceWithResponse request
	DeleteNamespaceWithResponse(ctx context.Context, namespaceId string, reqEditors ...RequestEditorFn) (*DeleteNamespaceResponse, error)

	// DeleteAccountWithResponse request
	DeleteAccountWithResponse(ctx context.Context, namespaceId string, accountId string, reqEditors ...RequestEditorFn) (*DeleteAccountResponse, error)

	// GetAccountWithResponse request
	GetAccountWithResponse(ctx context.Context, namespaceId string, accountId string, reqEditors ...RequestEditorFn) (*GetAccountResponse, error)

	// UpdateAccountWithBodyWithResponse request with any body
	UpdateAccountWithBodyWithResponse(ctx context.Context, namespaceId string, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountResponse, error)

	UpdateAccountWithResponse(ctx context.Context, namespaceId string, accountId string, body UpdateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountResponse, error)

	// ListStreamsWithResponse request
	ListStreamsWithResponse(ctx context.Context, namespaceId string, accountId string, reqEditors ...RequestEditorFn) (*ListStreamsResponse, error)

	// GetStreamWithResponse request
	GetStreamWithResponse(ctx context.Context, namespaceId string, accountId string, streamName string, reqEditors ...RequestEditorFn) (*GetStreamResponse, error)

	// FetchStreamMessagesWithResponse request
	FetchStreamMessagesWithResponse(ctx context.Context, namespaceId string, accountId string, streamName string, params *FetchStreamMessagesParams, reqEditors ...RequestEditorFn) (*FetchStreamMessagesResponse, error)

	// GetStreamMessageContentWithResponse request
	GetStreamMessageContentWithResponse(ctx context.Context, namespaceId string, accountId string, streamName string, streamSequence uint64, reqEditors ...RequestEditorFn) (*GetStreamMessageContentResponse, error)

	// ListUsersWithResponse request
	ListUsersWithResponse(ctx context.Context, namespaceId string, accountId string, params *ListUsersParams, reqEditors ...RequestEditorFn) (*ListUsersResponse, error)

	// CreateUserWithBodyWithResponse request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, namespaceId string, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, namespaceId string, accountId string, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	// ListOperatorsWithResponse request
	ListOperatorsWithResponse(ctx context.Context, namespaceId string, params *ListOperatorsParams, reqEditors ...RequestEditorFn) (*ListOperatorsResponse, error)

	// CreateOperatorWithBodyWithResponse request with any body
	CreateOperatorWithBodyWithResponse(ctx context.Context, namespaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOperatorResponse, error)

	CreateOperatorWithResponse(ctx context.Context, namespaceId string, body CreateOperatorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOperatorResponse, error)

	// DeleteOperatorWithResponse request
	DeleteOperatorWithResponse(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*DeleteOperatorResponse, error)

	// GetOperatorWithResponse request
	GetOperatorWithResponse(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*GetOperatorResponse, error)

	// UpdateOperatorWithBodyWithResponse request with any body
	UpdateOperatorWithBodyWithResponse(ctx context.Context, namespaceId string, operatorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOperatorResponse, error)

	UpdateOperatorWithResponse(ctx context.Context, namespaceId string, operatorId string, body UpdateOperatorJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOperatorResponse, error)

	// ListAccountsWithResponse request
	ListAccountsWithResponse(ctx context.Context, namespaceId string, operatorId string, params *ListAccountsParams, reqEditors ...RequestEditorFn) (*ListAccountsResponse, error)

	// CreateAccountWithBodyWithResponse request with any body
	CreateAccountWithBodyWithResponse(ctx context.Context, namespaceId string, operatorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	CreateAccountWithResponse(ctx context.Context, namespaceId string, operatorId string, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	// GetOperatorNATSConfigWithResponse request
	GetOperatorNATSConfigWithResponse(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*GetOperatorNATSConfigResponse, error)

	// GetOperatorProxyConnectionStatusWithResponse request
	GetOperatorProxyConnectionStatusWithResponse(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*GetOperatorProxyConnectionStatusResponse, error)

	// GenerateOperatorProxyTokenWithResponse request
	GenerateOperatorProxyTokenWithResponse(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*GenerateOperatorProxyTokenResponse, error)

	// DeleteUserWithResponse request
	DeleteUserWithResponse(ctx context.Context, namespaceId string, userId string, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, namespaceId string, userId string, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// UpdateUserWithBodyWithResponse request with any body
	UpdateUserWithBodyWithResponse(ctx context.Context, namespaceId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	UpdateUserWithResponse(ctx context.Context, namespaceId string, userId string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	// GetUserCredsWithResponse request
	GetUserCredsWithResponse(ctx context.Context, namespaceId string, userId string, reqEditors ...RequestEditorFn) (*GetUserCredsResponse, error)

	// ListUserJWTIssuancesWithResponse request
	ListUserJWTIssuancesWithResponse(ctx context.Context, namespaceId string, userId string, reqEditors ...RequestEditorFn) (*ListUserJWTIssuancesResponse, error)
}

type ListNamespacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data           []Namespace `json:"data"`
		NextPageCursor *string     `json:"next_page_cursor"`
	}
	JSON400 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *ListNamespacesResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r ListNamespacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListNamespacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data Namespace `json:"data"`
	}
	JSON400 *ResponseError
	JSON409 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *CreateNamespaceResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r CreateNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ResponseError
	JSON404      *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *DeleteNamespaceResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r DeleteNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ResponseError
	JSON404      *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *DeleteAccountResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r DeleteAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Account `json:"data"`
	}
	JSON400 *ResponseError
	JSON404 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *GetAccountResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r GetAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
	JSON400      *ResponseError
	JSON404      *ResponseError
	JSON409      *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *UpdateAccountResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r UpdateAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStreamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []Stream `json:"data"`
	}
	JSON400 *ResponseError
	JSON404 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *ListStreamsResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r ListStreamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStreamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data JetStream stream
		Data Stream `json:"data"`
	}
	JSON400 *ResponseError
	JSON404 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *GetStreamResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r GetStreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchStreamMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []StreamMessage `json:"data"`
	}
	JSON400 *ResponseError
	JSON404 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *FetchStreamMessagesResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r FetchStreamMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchStreamMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStreamMessageContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data JetStream stream message content
		Data StreamMessageContent `json:"data"`
	}
	JSON400 *ResponseError
	JSON404 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *GetStreamMessageContentResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r GetStreamMessageContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStreamMessageContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data           []User  `json:"data"`
		NextPageCursor *string `json:"next_page_cursor"`
	}
	JSON400 *ResponseError
	JSON404 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *ListUsersResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r ListUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// Data Common response for User endpoints
		Data User `json:"data"`
	}
	JSON400 *ResponseError
	JSON404 *ResponseError
	JSON409 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *CreateUserResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOperatorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data           []Operator `json:"data"`
		NextPageCursor *string    `json:"next_page_cursor"`
	}
	JSON400 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *ListOperatorsResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r ListOperatorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOperatorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOperatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// Data Common response for Operator endpoints
		Data Operator `json:"data"`
	}
	JSON400 *ResponseError
	JSON409 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *CreateOperatorResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r CreateOperatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOperatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOperatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ResponseError
	JSON404      *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *DeleteOperatorResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r DeleteOperatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOperatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOperatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Common response for Operator endpoints
		Data Operator `json:"data"`
	}
	JSON400 *ResponseError
	JSON404 *ResponseError
	JSON409 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *GetOperatorResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r GetOperatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOperatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOperatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Operator
	JSON400      *ResponseError
	JSON404      *ResponseError
	JSON409      *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *UpdateOperatorResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r UpdateOperatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOperatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data           []Account `json:"data"`
		NextPageCursor *string   `json:"next_page_cursor"`
	}
	JSON400 *ResponseError
	JSON404 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *ListAccountsResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r ListAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data Account `json:"data"`
	}
	JSON400 *ResponseError
	JSON404 *ResponseError
	JSON409 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *CreateAccountResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r CreateAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOperatorNATSConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ResponseError
	JSON404      *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *GetOperatorNATSConfigResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r GetOperatorNATSConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOperatorNATSConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOperatorProxyConnectionStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data OperatorNATSStatus `json:"data"`
	}
	JSON400 *ResponseError
	JSON404 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *GetOperatorProxyConnectionStatusResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r GetOperatorProxyConnectionStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOperatorProxyConnectionStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateOperatorProxyTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *struct {
			// Token Generated token
			Token string `json:"token"`
		} `json:"data,omitempty"`
	}
	JSON400 *ResponseError
	JSON404 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *GenerateOperatorProxyTokenResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r GenerateOperatorProxyTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateOperatorProxyTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ResponseError
	JSON404      *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *DeleteUserResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Common response for User endpoints
		Data User `json:"data"`
	}
	JSON400 *ResponseError
	JSON404 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *GetUserResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Common response for User endpoints
		Data User `json:"data"`
	}
	JSON400 *ResponseError
	JSON404 *ResponseError
	JSON409 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *UpdateUserResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r UpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserCredsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ResponseError
	JSON404      *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *GetUserCredsResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r GetUserCredsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserCredsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserJWTIssuancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data           *[]UserJWTIssuance `json:"data,omitempty"`
		NextPageCursor *string            `json:"next_page_cursor"`
	}
	JSON400 *ResponseError
	JSON404 *ResponseError
}

// GetBody returns the raw response body
// Note: this is a custom method added to the template
func (r *ListUserJWTIssuancesResponse) GetBody() []byte {
	if r == nil {
		return nil
	}
	return r.Body
}

// Status returns HTTPResponse.Status
func (r ListUserJWTIssuancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserJWTIssuancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListNamespacesWithResponse request returning *ListNamespacesResponse
func (c *clientWithResponses) ListNamespacesWithResponse(ctx context.Context, params *ListNamespacesParams, reqEditors ...RequestEditorFn) (*ListNamespacesResponse, error) {
	rsp, err := c.ListNamespaces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseListNamespacesResponse(rsp)
}

// CreateNamespaceWithBodyWithResponse request with arbitrary body returning *CreateNamespaceResponse
func (c *clientWithResponses) CreateNamespaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNamespaceResponse, error) {
	rsp, err := c.CreateNamespaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateNamespaceResponse(rsp)
}

func (c *clientWithResponses) CreateNamespaceWithResponse(ctx context.Context, body CreateNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNamespaceResponse, error) {
	rsp, err := c.CreateNamespace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateNamespaceResponse(rsp)
}

// DeleteNamespaceWithResponse request returning *DeleteNamespaceResponse
func (c *clientWithResponses) DeleteNamespaceWithResponse(ctx context.Context, namespaceId string, reqEditors ...RequestEditorFn) (*DeleteNamespaceResponse, error) {
	rsp, err := c.DeleteNamespace(ctx, namespaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseDeleteNamespaceResponse(rsp)
}

// DeleteAccountWithResponse request returning *DeleteAccountResponse
func (c *clientWithResponses) DeleteAccountWithResponse(ctx context.Context, namespaceId string, accountId string, reqEditors ...RequestEditorFn) (*DeleteAccountResponse, error) {
	rsp, err := c.DeleteAccount(ctx, namespaceId, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseDeleteAccountResponse(rsp)
}

// GetAccountWithResponse request returning *GetAccountResponse
func (c *clientWithResponses) GetAccountWithResponse(ctx context.Context, namespaceId string, accountId string, reqEditors ...RequestEditorFn) (*GetAccountResponse, error) {
	rsp, err := c.GetAccount(ctx, namespaceId, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGetAccountResponse(rsp)
}

// UpdateAccountWithBodyWithResponse request with arbitrary body returning *UpdateAccountResponse
func (c *clientWithResponses) UpdateAccountWithBodyWithResponse(ctx context.Context, namespaceId string, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountResponse, error) {
	rsp, err := c.UpdateAccountWithBody(ctx, namespaceId, accountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseUpdateAccountResponse(rsp)
}

func (c *clientWithResponses) UpdateAccountWithResponse(ctx context.Context, namespaceId string, accountId string, body UpdateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountResponse, error) {
	rsp, err := c.UpdateAccount(ctx, namespaceId, accountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseUpdateAccountResponse(rsp)
}

// ListStreamsWithResponse request returning *ListStreamsResponse
func (c *clientWithResponses) ListStreamsWithResponse(ctx context.Context, namespaceId string, accountId string, reqEditors ...RequestEditorFn) (*ListStreamsResponse, error) {
	rsp, err := c.ListStreams(ctx, namespaceId, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseListStreamsResponse(rsp)
}

// GetStreamWithResponse request returning *GetStreamResponse
func (c *clientWithResponses) GetStreamWithResponse(ctx context.Context, namespaceId string, accountId string, streamName string, reqEditors ...RequestEditorFn) (*GetStreamResponse, error) {
	rsp, err := c.GetStream(ctx, namespaceId, accountId, streamName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGetStreamResponse(rsp)
}

// FetchStreamMessagesWithResponse request returning *FetchStreamMessagesResponse
func (c *clientWithResponses) FetchStreamMessagesWithResponse(ctx context.Context, namespaceId string, accountId string, streamName string, params *FetchStreamMessagesParams, reqEditors ...RequestEditorFn) (*FetchStreamMessagesResponse, error) {
	rsp, err := c.FetchStreamMessages(ctx, namespaceId, accountId, streamName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseFetchStreamMessagesResponse(rsp)
}

// GetStreamMessageContentWithResponse request returning *GetStreamMessageContentResponse
func (c *clientWithResponses) GetStreamMessageContentWithResponse(ctx context.Context, namespaceId string, accountId string, streamName string, streamSequence uint64, reqEditors ...RequestEditorFn) (*GetStreamMessageContentResponse, error) {
	rsp, err := c.GetStreamMessageContent(ctx, namespaceId, accountId, streamName, streamSequence, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGetStreamMessageContentResponse(rsp)
}

// ListUsersWithResponse request returning *ListUsersResponse
func (c *clientWithResponses) ListUsersWithResponse(ctx context.Context, namespaceId string, accountId string, params *ListUsersParams, reqEditors ...RequestEditorFn) (*ListUsersResponse, error) {
	rsp, err := c.ListUsers(ctx, namespaceId, accountId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseListUsersResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *clientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, namespaceId string, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, namespaceId, accountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateUserResponse(rsp)
}

func (c *clientWithResponses) CreateUserWithResponse(ctx context.Context, namespaceId string, accountId string, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, namespaceId, accountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateUserResponse(rsp)
}

// ListOperatorsWithResponse request returning *ListOperatorsResponse
func (c *clientWithResponses) ListOperatorsWithResponse(ctx context.Context, namespaceId string, params *ListOperatorsParams, reqEditors ...RequestEditorFn) (*ListOperatorsResponse, error) {
	rsp, err := c.ListOperators(ctx, namespaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseListOperatorsResponse(rsp)
}

// CreateOperatorWithBodyWithResponse request with arbitrary body returning *CreateOperatorResponse
func (c *clientWithResponses) CreateOperatorWithBodyWithResponse(ctx context.Context, namespaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOperatorResponse, error) {
	rsp, err := c.CreateOperatorWithBody(ctx, namespaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateOperatorResponse(rsp)
}

func (c *clientWithResponses) CreateOperatorWithResponse(ctx context.Context, namespaceId string, body CreateOperatorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOperatorResponse, error) {
	rsp, err := c.CreateOperator(ctx, namespaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateOperatorResponse(rsp)
}

// DeleteOperatorWithResponse request returning *DeleteOperatorResponse
func (c *clientWithResponses) DeleteOperatorWithResponse(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*DeleteOperatorResponse, error) {
	rsp, err := c.DeleteOperator(ctx, namespaceId, operatorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseDeleteOperatorResponse(rsp)
}

// GetOperatorWithResponse request returning *GetOperatorResponse
func (c *clientWithResponses) GetOperatorWithResponse(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*GetOperatorResponse, error) {
	rsp, err := c.GetOperator(ctx, namespaceId, operatorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGetOperatorResponse(rsp)
}

// UpdateOperatorWithBodyWithResponse request with arbitrary body returning *UpdateOperatorResponse
func (c *clientWithResponses) UpdateOperatorWithBodyWithResponse(ctx context.Context, namespaceId string, operatorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOperatorResponse, error) {
	rsp, err := c.UpdateOperatorWithBody(ctx, namespaceId, operatorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseUpdateOperatorResponse(rsp)
}

func (c *clientWithResponses) UpdateOperatorWithResponse(ctx context.Context, namespaceId string, operatorId string, body UpdateOperatorJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOperatorResponse, error) {
	rsp, err := c.UpdateOperator(ctx, namespaceId, operatorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseUpdateOperatorResponse(rsp)
}

// ListAccountsWithResponse request returning *ListAccountsResponse
func (c *clientWithResponses) ListAccountsWithResponse(ctx context.Context, namespaceId string, operatorId string, params *ListAccountsParams, reqEditors ...RequestEditorFn) (*ListAccountsResponse, error) {
	rsp, err := c.ListAccounts(ctx, namespaceId, operatorId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseListAccountsResponse(rsp)
}

// CreateAccountWithBodyWithResponse request with arbitrary body returning *CreateAccountResponse
func (c *clientWithResponses) CreateAccountWithBodyWithResponse(ctx context.Context, namespaceId string, operatorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccountWithBody(ctx, namespaceId, operatorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateAccountResponse(rsp)
}

func (c *clientWithResponses) CreateAccountWithResponse(ctx context.Context, namespaceId string, operatorId string, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccount(ctx, namespaceId, operatorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateAccountResponse(rsp)
}

// GetOperatorNATSConfigWithResponse request returning *GetOperatorNATSConfigResponse
func (c *clientWithResponses) GetOperatorNATSConfigWithResponse(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*GetOperatorNATSConfigResponse, error) {
	rsp, err := c.GetOperatorNATSConfig(ctx, namespaceId, operatorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGetOperatorNATSConfigResponse(rsp)
}

// GetOperatorProxyConnectionStatusWithResponse request returning *GetOperatorProxyConnectionStatusResponse
func (c *clientWithResponses) GetOperatorProxyConnectionStatusWithResponse(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*GetOperatorProxyConnectionStatusResponse, error) {
	rsp, err := c.GetOperatorProxyConnectionStatus(ctx, namespaceId, operatorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGetOperatorProxyConnectionStatusResponse(rsp)
}

// GenerateOperatorProxyTokenWithResponse request returning *GenerateOperatorProxyTokenResponse
func (c *clientWithResponses) GenerateOperatorProxyTokenWithResponse(ctx context.Context, namespaceId string, operatorId string, reqEditors ...RequestEditorFn) (*GenerateOperatorProxyTokenResponse, error) {
	rsp, err := c.GenerateOperatorProxyToken(ctx, namespaceId, operatorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGenerateOperatorProxyTokenResponse(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResponse
func (c *clientWithResponses) DeleteUserWithResponse(ctx context.Context, namespaceId string, userId string, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, namespaceId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseDeleteUserResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *clientWithResponses) GetUserWithResponse(ctx context.Context, namespaceId string, userId string, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, namespaceId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGetUserResponse(rsp)
}

// UpdateUserWithBodyWithResponse request with arbitrary body returning *UpdateUserResponse
func (c *clientWithResponses) UpdateUserWithBodyWithResponse(ctx context.Context, namespaceId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUserWithBody(ctx, namespaceId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseUpdateUserResponse(rsp)
}

func (c *clientWithResponses) UpdateUserWithResponse(ctx context.Context, namespaceId string, userId string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUser(ctx, namespaceId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseUpdateUserResponse(rsp)
}

// GetUserCredsWithResponse request returning *GetUserCredsResponse
func (c *clientWithResponses) GetUserCredsWithResponse(ctx context.Context, namespaceId string, userId string, reqEditors ...RequestEditorFn) (*GetUserCredsResponse, error) {
	rsp, err := c.GetUserCreds(ctx, namespaceId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGetUserCredsResponse(rsp)
}

// ListUserJWTIssuancesWithResponse request returning *ListUserJWTIssuancesResponse
func (c *clientWithResponses) ListUserJWTIssuancesWithResponse(ctx context.Context, namespaceId string, userId string, reqEditors ...RequestEditorFn) (*ListUserJWTIssuancesResponse, error) {
	rsp, err := c.ListUserJWTIssuances(ctx, namespaceId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseListUserJWTIssuancesResponse(rsp)
}

// parseListNamespacesResponse parses an HTTP response from a ListNamespacesWithResponse call
func parseListNamespacesResponse(rsp *http.Response) (*ListNamespacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListNamespacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data           []Namespace `json:"data"`
			NextPageCursor *string     `json:"next_page_cursor"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// parseCreateNamespaceResponse parses an HTTP response from a CreateNamespaceWithResponse call
func parseCreateNamespaceResponse(rsp *http.Response) (*CreateNamespaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data Namespace `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// parseDeleteNamespaceResponse parses an HTTP response from a DeleteNamespaceWithResponse call
func parseDeleteNamespaceResponse(rsp *http.Response) (*DeleteNamespaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// parseDeleteAccountResponse parses an HTTP response from a DeleteAccountWithResponse call
func parseDeleteAccountResponse(rsp *http.Response) (*DeleteAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// parseGetAccountResponse parses an HTTP response from a GetAccountWithResponse call
func parseGetAccountResponse(rsp *http.Response) (*GetAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Account `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// parseUpdateAccountResponse parses an HTTP response from a UpdateAccountWithResponse call
func parseUpdateAccountResponse(rsp *http.Response) (*UpdateAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// parseListStreamsResponse parses an HTTP response from a ListStreamsWithResponse call
func parseListStreamsResponse(rsp *http.Response) (*ListStreamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListStreamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []Stream `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// parseGetStreamResponse parses an HTTP response from a GetStreamWithResponse call
func parseGetStreamResponse(rsp *http.Response) (*GetStreamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data JetStream stream
			Data Stream `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// parseFetchStreamMessagesResponse parses an HTTP response from a FetchStreamMessagesWithResponse call
func parseFetchStreamMessagesResponse(rsp *http.Response) (*FetchStreamMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchStreamMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []StreamMessage `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// parseGetStreamMessageContentResponse parses an HTTP response from a GetStreamMessageContentWithResponse call
func parseGetStreamMessageContentResponse(rsp *http.Response) (*GetStreamMessageContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStreamMessageContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data JetStream stream message content
			Data StreamMessageContent `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// parseListUsersResponse parses an HTTP response from a ListUsersWithResponse call
func parseListUsersResponse(rsp *http.Response) (*ListUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data           []User  `json:"data"`
			NextPageCursor *string `json:"next_page_cursor"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// parseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func parseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// Data Common response for User endpoints
			Data User `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// parseListOperatorsResponse parses an HTTP response from a ListOperatorsWithResponse call
func parseListOperatorsResponse(rsp *http.Response) (*ListOperatorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOperatorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data           []Operator `json:"data"`
			NextPageCursor *string    `json:"next_page_cursor"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// parseCreateOperatorResponse parses an HTTP response from a CreateOperatorWithResponse call
func parseCreateOperatorResponse(rsp *http.Response) (*CreateOperatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOperatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// Data Common response for Operator endpoints
			Data Operator `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// parseDeleteOperatorResponse parses an HTTP response from a DeleteOperatorWithResponse call
func parseDeleteOperatorResponse(rsp *http.Response) (*DeleteOperatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOperatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// parseGetOperatorResponse parses an HTTP response from a GetOperatorWithResponse call
func parseGetOperatorResponse(rsp *http.Response) (*GetOperatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOperatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Common response for Operator endpoints
			Data Operator `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// parseUpdateOperatorResponse parses an HTTP response from a UpdateOperatorWithResponse call
func parseUpdateOperatorResponse(rsp *http.Response) (*UpdateOperatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOperatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Operator
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// parseListAccountsResponse parses an HTTP response from a ListAccountsWithResponse call
func parseListAccountsResponse(rsp *http.Response) (*ListAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data           []Account `json:"data"`
			NextPageCursor *string   `json:"next_page_cursor"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// parseCreateAccountResponse parses an HTTP response from a CreateAccountWithResponse call
func parseCreateAccountResponse(rsp *http.Response) (*CreateAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data Account `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// parseGetOperatorNATSConfigResponse parses an HTTP response from a GetOperatorNATSConfigWithResponse call
func parseGetOperatorNATSConfigResponse(rsp *http.Response) (*GetOperatorNATSConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOperatorNATSConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// parseGetOperatorProxyConnectionStatusResponse parses an HTTP response from a GetOperatorProxyConnectionStatusWithResponse call
func parseGetOperatorProxyConnectionStatusResponse(rsp *http.Response) (*GetOperatorProxyConnectionStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOperatorProxyConnectionStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data OperatorNATSStatus `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// parseGenerateOperatorProxyTokenResponse parses an HTTP response from a GenerateOperatorProxyTokenWithResponse call
func parseGenerateOperatorProxyTokenResponse(rsp *http.Response) (*GenerateOperatorProxyTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateOperatorProxyTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *struct {
				// Token Generated token
				Token string `json:"token"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// parseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func parseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// parseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func parseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Common response for User endpoints
			Data User `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// parseUpdateUserResponse parses an HTTP response from a UpdateUserWithResponse call
func parseUpdateUserResponse(rsp *http.Response) (*UpdateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Common response for User endpoints
			Data User `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// parseGetUserCredsResponse parses an HTTP response from a GetUserCredsWithResponse call
func parseGetUserCredsResponse(rsp *http.Response) (*GetUserCredsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserCredsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// parseListUserJWTIssuancesResponse parses an HTTP response from a ListUserJWTIssuancesWithResponse call
func parseListUserJWTIssuancesResponse(rsp *http.Response) (*ListUserJWTIssuancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserJWTIssuancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data           *[]UserJWTIssuance `json:"data,omitempty"`
			NextPageCursor *string            `json:"next_page_cursor"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
